import 'package:flutter/material.dart';
import 'package:auto_size_text_field/auto_size_text_field.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:gap/gap.dart';
import 'package:firebase_auth/firebase_auth.dart';

// //utils
import '../utils/page_title.dart';
import '../utils/colors.dart';
import '../utils/text_styles.dart';
import "../utils/button_styles.dart";

// models
import '../../models/recipe_model.dart';

// controllers
import '../../controllers/recipe_controller.dart';

class RecipeEditPage extends StatefulWidget {
  const RecipeEditPage({super.key, required this.recipe, required this.user});
  final Recipe recipe;
  final User user;
  final String titleName = "レシピ編集";

  @override
  State<RecipeEditPage> createState() => _RecipeEditPageState();
}

class _RecipeEditPageState extends State<RecipeEditPage> {
  // Formキーの設定
  final _formKey = GlobalKey<FormState>();
  // 対象レシピのドキュメントID
  late final String _recipeId;
  // レシピ追加フォーム入力
  late final String _recipeTypeController;
  final _dishNameController = TextEditingController();
  final _ingredientsController = TextEditingController();
  final _instructionsController = TextEditingController();
  final _urlController = TextEditingController();

  // レシピが登録されている最中かどうか
  bool isRegisteringRecipeToFirestore = false;

  // レシピの種類Mapping
  final String _originalRecipe = "Original Recipe";
  final String _webRecipe = "Web Recipe";
  final String _webRecipeAutoGeneratedByAI = "Web Recipe Auto Generated By AI";

  // ページに表示するレシピの種類の名前
  late final String _displayedRecipeTypeName;

  @override
  void initState() {
    super.initState();
    // 対象レシピのドキュメントIDを取得
    _recipeId = widget.recipe.recipeId ?? "";

    // 入力値の初期値を設定
    _recipeTypeController = widget.recipe.recipeType ?? "";
    _dishNameController.text = widget.recipe.dishName ?? "";
    _ingredientsController.text = widget.recipe.ingredients ?? "";
    _instructionsController.text = widget.recipe.instructions ?? "";
    _urlController.text = widget.recipe.url ?? "";

    // レシピの種類によって，画面に表示するレシピの種類の名前を設定
    if (_recipeTypeController == _originalRecipe) {
      _displayedRecipeTypeName = "オリジナルレシピ";
    } else if (_recipeTypeController == _webRecipe) {
      _displayedRecipeTypeName = "Webレシピ";
    } else if (_recipeTypeController == _webRecipeAutoGeneratedByAI) {
      _displayedRecipeTypeName = "生成AIによって生成したWebレシピ";
    } else {
      _displayedRecipeTypeName = "不明なレシピ";
    }
  }

  // 入力全てリセットする
  void _resetFormInput() {
    setState(() {
      _dishNameController.text = "";
      _ingredientsController.text = "";
      _instructionsController.text = "";
      _urlController.text = "";
    });
  }

  // バリデーター
  // // 入力値がnullまたは空文字かチェックする．
  String? _validateInputHasText({required value}) {
    if (value == null || value.isEmpty) {
      return 'テキストを入力してください';
    }
    return null;
  }

  // // 入力値が適切なurlかどうかチェックする
  String? _validateInputIsValidURL({required urlValue}) {
    // 入力欄に何も入力されてない
    if (urlValue == null || urlValue.isEmpty) {
      return '何も入力されてません';
      // 入力されたURLが，適切な場合
    } else if (!Uri.parse(urlValue).isAbsolute ||
        !Uri.parse(urlValue).hasAbsolutePath) {
      return "不適切なURLです";
    }
    return null;
  }

  // // 全入力値が有効かどうか判断する
  bool _allInputsvalidated() {
    if (_formKey.currentState!.validate()) {
      return true;
    }
    return false;
  }

  // Firestoreにレシピを追加する．
  bool _addRecipeToFirestore({required uid}) {
    RecipeController recipeController = RecipeController(user: widget.user);
    bool result = recipeController.updateToFirestore(
      recipeId: _recipeId,
      dishName: _dishNameController.text,
      recipeType: _recipeTypeController,
      ingredients: _ingredientsController.text,
      instructions: _instructionsController.text,
      url: _urlController.text,
    );
    // レシピ追加の結果を返す．
    return result;
  }

  // 画面部分
  @override
  Widget build(BuildContext context) {
    // userIDを取得する．
    // ここにfirestoreのproviderを用意する．

    return Scaffold(
        backgroundColor: CommonColors.pageBackgroundColor,
        appBar: AppBar(
          title: PageTitle(pageTitleName: widget.titleName),
          backgroundColor: CommonColors.primaryColor,
        ),
        body: SingleChildScrollView(
            child: Column(
          children: [
            // 入力リセットボタン&入力形式の変更
            Container(
                padding: const EdgeInsets.all(24),
                child: Column(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: <Widget>[
                      Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // 入力リセットボタン
                            ElevatedButton(
                              style: RecipeEditPageButton.style,
                              child: const Text('入力全てリセットする',
                                  style: elevatedButtonTextStyle),
                              onPressed: () {
                                _resetFormInput();
                              },
                            ),
                          ])
                    ])),
            // 横線
            const Divider(
              color: CommonColors.primaryColor,
              thickness: 5,
            ),
            // 入力フォームとボタン
            Container(
                padding: const EdgeInsets.all(24),
                child: Form(
                    key: _formKey,
                    child: Column(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: <Widget>[
                          // レシピ種類表示
                          Text(
                            _displayedRecipeTypeName,
                            style: const TextStyle(
                              fontSize: 20,
                              color: CommonColors.textColor,
                            ),
                          ),
                          const Gap(20),
                          // 料理名フィールド
                          AutoSizeTextFormField(
                            minLines: 1,
                            maxLines: 1,
                            controller: _dishNameController,
                            decoration: const InputDecoration(
                              labelText: '料理名',
                              border: OutlineInputBorder(),
                            ),
                            validator: (value) {
                              return _validateInputHasText(value: value);
                            },
                          ),
                          const Gap(10),
                          // 材料フィールド
                          AutoSizeTextFormField(
                            minLines: 1,
                            maxLines: 20,
                            controller: _ingredientsController,
                            decoration: const InputDecoration(
                                labelText: '材料',
                                isDense: true,
                                border: OutlineInputBorder()),
                            validator: (value) {
                              return _validateInputHasText(value: value);
                            },
                          ),
                          const Gap(10),
                          // 作り方フィールド
                          AutoSizeTextFormField(
                            minLines: 1,
                            maxLines: 50,
                            controller: _instructionsController,
                            decoration: const InputDecoration(
                              labelText: '作り方',
                              isDense: true,
                              border: OutlineInputBorder(),
                            ),
                            validator: (value) {
                              return _validateInputHasText(value: value);
                            },
                          ),
                          const Gap(10),
                          // URLフィールド
                          Visibility(
                            visible: _recipeTypeController != _originalRecipe,
                            child: AutoSizeTextFormField(
                              minLines: 1,
                              maxLines: 1,
                              controller: _urlController,
                              decoration: const InputDecoration(
                                labelText: 'サイトURL',
                                border: OutlineInputBorder(),
                              ),
                              validator: (value) {
                                return _validateInputIsValidURL(
                                    urlValue: value);
                              },
                            ),
                          ),
                          const Gap(20),
                          // レシピ追加ボタン
                          ElevatedButton(
                            style: RecipeEditPageButton.style,
                            child: isRegisteringRecipeToFirestore
                                ? const CircularProgressIndicator(
                                    strokeWidth: 2.0,
                                    color: CommonColors.textColor)
                                : const Text('レシピを編集する',
                                    style: elevatedButtonTextStyle),
                            onPressed: () async {
                              // 入力が有効な場合 → レシピ追加する．
                              if (_allInputsvalidated()) {
                                // isRegisteringRecipeToFirestoreをtrueにする．
                                setState(() {
                                  isRegisteringRecipeToFirestore = true;
                                });
                                // レシピ編集
                                bool addRecipeToFirestoreResult =
                                    _addRecipeToFirestore(uid: widget.user.uid);

                                // ユーザ名変更捜査の結果を表示する．
                                if (addRecipeToFirestoreResult) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                          content: Text('レシピを編集しました')));
                                  Navigator.pop(context);
                                  Navigator.pop(context);
                                } else {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                          content: Text('レシピ編集に失敗しました')));
                                }
                              }
                            },
                          ),
                          const Gap(10),
                        ])))
          ],
        )));
  }
}
