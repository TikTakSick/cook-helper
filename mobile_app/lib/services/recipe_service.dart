import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

// models
import '../models/recipe_model.dart';

class RecipeService {
  final User? user;
  final CollectionReference recipesCollectionRef;
  final bool success = true;

  // コンストラクタ
  RecipeService({required this.user})
      : recipesCollectionRef = FirebaseFirestore.instance
            .collection('users')
            .doc(user?.uid)
            .collection('recipes');

  // レシピ追加
  Future<void> addToFirestore({
    required String dishName,
    required String recipeType,
    required String ingredients,
    required String instructions,
    required String url,
  }) async {
    // データベース追加
    if (recipeType != "Web Recipe Auto Generated By AI") {
      // レシピインスタンス生成
      Recipe recipe = Recipe(
        dishName: dishName,
        recipeType: recipeType,
        ingredients: ingredients,
        instructions: instructions,
        url: url,
      );
      await recipesCollectionRef.add(recipe.toFirestore()).then(
          (documentSnapshot) =>
              {debugPrint("Added Data with ID: ${documentSnapshot.id}")});
    } else {
      // recipeTypeがWeb Recipe Auto Generated By AIの場合は、バックエンド側でレシピ生成・追加を行う
      final Future<String?> idToken = user!.getIdToken();
      await idToken.then(
        (idToken) async {
          // バックエンドにレシピ生成リクエストを送信
          debugPrint("Requesting to backend...");
          final response = await _request(
            recipeUrl: url,
            idToken: idToken,
            recipeType: recipeType,
          );
          if (response.statusCode == 200) {
            debugPrint("Request to backend：successful");
          } else {
            throw Exception(
                "Error on requesting to backend: ${response.statusCode}");
          }
        },
        onError: (error) {
          throw Exception("error on getting id token: $error");
        },
      );
    }
  }

  // レシピ内容編集
  Future<void> updateToFirestore({
    required String recipeId,
    required String dishName,
    required String recipeType,
    required String ingredients,
    required String instructions,
    required String url,
  }) async {
    Recipe recipe = Recipe(
      recipeId: recipeId,
      dishName: dishName,
      recipeType: recipeType,
      ingredients: ingredients,
      instructions: instructions,
      url: url,
    );
    // 参照先作成
    DocumentReference recipeDocumentRef = recipesCollectionRef.doc(recipeId);
    // 内容変更
    await recipeDocumentRef
        .update(recipe.toFirestore())
        .then((value) => debugPrint("DocumentSnapshot successfully updated!"));
  }

  // レシピ読みだし
  Stream streamRecipesFromFirestore() {
    return recipesCollectionRef.orderBy('dishName').snapshots().map((snapshot) {
      final recipes = snapshot.docs
          .map((recipeDocument) => Recipe.fromFirestore(
              recipeDocument as QueryDocumentSnapshot<Map<String, dynamic>>))
          .toList();
      //デバッグ出力

      // for (var recipe in recipes) {
      //   debugPrint("Recipe: ${recipe.dishName}, ${recipe.recipeId}");
      // }
      return recipes;
    });
  }

  // レシピ削除
  Future deleteFromFirestore({
    required String recipeId,
  }) async {
    // 参照先作成
    DocumentReference recipeDocumentRef = recipesCollectionRef.doc(recipeId);
    // 削除
    await recipeDocumentRef.delete().then((value) {
      debugPrint("RecipeDocument  successfully deleted!");
    });
  }

  // リクエスト送信
  Future<http.Response> _request({
    required recipeUrl,
    required idToken,
    required recipeType,
  }) {
    // バックエンドURL
    final backendUrl = Uri.parse(dotenv.env['BACKEND_URL']!);
    // headers
    Map<String, String> headers = {
      'Content-Type': 'application/json; charset=UTF-8',
      'Authorization': 'Bearer $idToken',
    };
    // body
    Object? body = jsonEncode(<String, String>{
      'url': recipeUrl,
      "recipeType": recipeType,
    });
    // リクエスト送信
    return http.post(backendUrl, headers: headers, body: body);
  }
}
